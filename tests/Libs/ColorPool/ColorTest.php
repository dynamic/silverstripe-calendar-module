<?php

namespace TitleDK\Calendar\Tests\Libs\ColorPool;

use SilverStripe\Dev\SapphireTest;
use TitleDK\Calendar\Libs\ColorPool\Color;

class ColorTest extends SapphireTest
{
    /** @var Color */
    private $testColor;

    public function setUp()
    {
        $this->testColor = new Color('#42AB1E');
        return parent::setUp(); // TODO: Change the autogenerated stub
    }

    public function test__construct_param_not_string()
    {
        $c = new Color(444);
        $this->assertNull($c->r);
        $this->assertNull($c->g);
        $this->assertNull($c->b);
    }

    public function test__construct_param_string_hex()
    {
        $c = new Color("#AB442F");
        $this->assertEquals('171', $c->r);
        $this->assertEquals('68', $c->g);
        $this->assertEquals('47', $c->b);
    }


    // @todo Cannot find a format that works here
    public function test_from_rgb_string()
    {
        //$this->assertEquals('', Color::fromRGBString('rgb(128,0,128)'));
    }

    public function testToHexString()
    {
        $this->assertEquals('#42ab1e', $this->testColor->toHexString());
    }

    public function testDecToHex()
    {
        $this->markTestSkipped('TODO');
    }

    public function test_from_hsl()
    {
        $color = Color::fromHSL(0.4, 0.8, 0.8);
        $this->assertEquals('#a3f5c4', $color->toHexString());
    }

    public function testFromHSV()
    {
        $color = Color::fromHSV(0.4, 0.8, 0.8);
        $this->assertEquals('#29cc6a', $color->toHexString());
    }

    public function test_darken()
    {
        $this->assertEquals('#358918', $this->testColor->darken(0.2)->toHexString());
    }

    public function test_lighten()
    {
        $this->assertEquals('#59da2d', $this->testColor->lighten(0.2)->toHexString());
    }

    public function test_saturate()
    {
        $this->assertEquals('#33c900', $this->testColor->saturate(0.3)->toHexString());
    }

    public function test_contrast()
    {
        $this->assertEquals('#871eab', $this->testColor->contrast()->toHexString());
    }

    public function test_change_hsl()
    {
        $this->assertEquals('#b5e0dd', $this->testColor->changeHSL(0.2, -0.3, 0.4)->toHexString());
    }


    public function test_to_hsl()
    {
        $this->assertEquals(
            [
                0.2907801418439715,
                0.7014925373134328,
                0.3941176470588235
            ],
            $this->testColor->toHSL()
        );
    }

    public function test_to_hsv()
    {
        $this->assertEquals(
            [
                0.2907801418439715,
                0.8245614035087718,
                0.6705882352941176
                ],
            $this->testColor->toHSV()
        );
    }

    public function test_luma()
    {
        $this->assertEquals(0.48623529411764704, $this->testColor->luma());
    }

    public function test_is_dark()
    {
        $this->assertTrue($this->testColor->isDark());
    }
}
